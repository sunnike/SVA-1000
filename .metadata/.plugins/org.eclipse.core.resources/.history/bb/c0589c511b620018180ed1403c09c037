/*
 * aewin_def.h
 *
 *  Created on: 2018年4月15日
 *      Author: John Chen
 */

#ifndef AEWIN_DEF_H_
#define AEWIN_DEF_H_

#ifdef __cplusplus
 extern "C" {
#endif

/* Includes ------------------------------------------------------------------*/
#include "stm32f0xx_hal.h"
#include "main.h"

/* USER CODE BEGIN Includes */

/* USER CODE END Includes */


/* USER CODE BEGIN Definition */
#ifndef TRUE
	#define TRUE 	(1)
#endif

#ifndef FALSE
	#define FALSE	(0)
#endif


 /** @defgroup AEWIN_DEBUG Aewin Debug Configuration
   * @{
   */
#define AEWIN_DBUG			(1)
#define PRINT_BUFF			(64)


#define UART3_TIMEOUT		2



 /** @defgroup Aewin_Task_Entry_Time Tasks entry time configuration
   * @{
   */
#define UART3_TASK_ENTRY_TIME		(5U)
#define INGITION_TASK_ENTRY_TIME	(950U)
#define IWDG_TASK_ENTRY_TIME		(10U)


 /** @defgroup STM32F0XX_ADC STM32F0XX ADC Configuration
   * @{
   */
#define ADC_DEVICE_NUM				(2U)
#define ADC_CAP_TIME				(500U)
#define ADC_RESET_TIME				(500U)
/* USER CODE END Definition */


/* USER CODE BEGIN ENUM definitions */

 /******  SVA-1000 specific Ignition States ******************************************************************/
typedef enum{
	IG_Reserved = 0,			 	/*!< Reserved */
	IG_Recovery = 1,				/*!< Recovery all of states and parameters */
	IG_PowerOn_Delay,				/*!< Indicate that the system is ready to "power on" (for IG switch) */
	IG_Wait_StartUp1,				/*!< Indicate that the system is ready to "start up" (for power button)*/
	IG_Wait_StartUp2,				/*!< Indicate that the system is ready to "start up" */
	IG_Start_Up,					/*!< Indicate that the system is in "start up" state */
	IG_Shutdown_Delay,
	IG_shutting_Down,
	IG_LowPower_Delay,
	IG_CloseUp,
	IG_End = 100
}eIgnition_States;

/* USER CODE END ENUM definitions  */



/* USER CODE BEGIN structure definitions */

typedef struct{
	uint32_t pwr_24v;
	uint32_t mcu_temp;
}sADC_DATA;


/* The structure that contains the ignition related parameters, along with an IG_States
that is used to identify which power state is. */
typedef struct{
	eIgnition_States IG_States;		/*!< Ignition states. */
	uint8_t	 pwron_delay;			/*!< Delay time after ignition switch-on from "Close-Up" */
	uint8_t  wait_startup_time;		/*!< /*!< The delay time to prepare entering "Start Up" state. */
	uint8_t	 startup_timeout;		/*!< Timeout value to accept the ignition signal. */
	uint8_t  pwroff_delay;			/*!< Delay time after ignition switch-off from "Start-Up" */
	uint8_t  shutdown_delay;		/*!< The delay time to prepare entering "Power Off" state. */
	uint8_t  shutdown_timeout;		/*!< Timeout value to accept the ignition signal. */
	uint8_t  lowpwr_dealy;			/*!< The delay time of low-power shutdown */
	uint8_t  wtdog_default;
	uint8_t  pwroff_btn_cnt;
	uint8_t	 pwrbtn_pressed;
	uint8_t  pwrgood_chk_time;
	uint8_t  in_volt_min;			/*!< Minimum input voltage */
	uint8_t  in_volt_max;			/*!< Maximum input voltage */
	uint8_t  startup_volt;			/*!< The lowest voltage that can be accepted to start up system */
	uint8_t  in_temp_min;			/*!< The acceptable minimum temperature */
	uint8_t  in_temp_max;			/*!< The acceptable maximum temperature */
	uint8_t  startup_temp;			/*!< The highest temperature that can be accepted to start up system */
	uint16_t fail_retry;			/*!< Record the re-power times in case of system failure */
	uint16_t fail_count;
}sIG_EVENT;




typedef struct{
	uint8_t	 ig_sw			: 1;
	uint8_t  pwr_btn		: 1;
	uint8_t  sys_pwron		: 1;
	uint8_t  dc2dc_pwrok	: 1;
	uint8_t  reserved		: 4;
}sSVA_GPI_STATE;


typedef struct{
	uint8_t	 spi1_cs 		: 1;
	uint8_t	 dc2dc_en 		: 1;
	uint8_t	 reseved 		: 6;
}sSVA_GPO_STATE;

/* USER CODE END structure definitions  */




/* USER CODE BEGIN Private defines */

/* USER CODE END Private defines */



/* USER CODE BEGIN Prototypes */
/*
int fputc(int ch, FILE *f);
int getc(FILE *f);
*/


#if (AEWIN_DBUG)
	void aewin_dbg(char *fmt,...);
	#define printf		aewin_dbg
#else
    #define aewin_dbg(var,...)
#endif

/* USER CODE END Prototypes */



#ifdef __cplusplus
}
#endif




#endif /* AEWIN_DEF_H_ */
